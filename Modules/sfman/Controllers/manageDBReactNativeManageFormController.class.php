<?php

namespace Modules\sfman\Controllers;

use Modules\sfman\Classes\Field\React\Native\Manage\autoField;
use Modules\sfman\Classes\Field\React\Native\Manage\booleanField;
use Modules\sfman\Classes\Field\React\Native\Manage\cityAreaField;
use Modules\sfman\Classes\Field\React\Native\Manage\clockField;
use Modules\sfman\Classes\Field\React\Native\Manage\emptyField;
use Modules\sfman\Classes\Field\React\Native\Manage\foreignIDField;
use Modules\sfman\Classes\Field\React\Native\Manage\imageUploadField;
use Modules\sfman\Classes\Field\React\Native\Manage\locationField;
use Modules\sfman\Classes\Field\React\Native\Manage\nummericField;
use Modules\sfman\Classes\Field\React\Native\Manage\reactNativeManageField;
use Modules\sfman\Classes\Field\React\ReactFieldCode;


/**
 * @author Hadi AmirNahavandi
 * @creationDate 1395/10/9 - 2016/12/29 19:36:38
 * @lastUpdate 1395/10/9 - 2016/12/29 19:36:38
 * @SweetFrameworkHelperVersion 1.112
 */
abstract class manageDBReactNativeManageFormController extends manageDBReactNativeFormController
{
    /**
     * @param string $ModuleName
     * @param string $FormName
     * @param string $FieldName
     * @param string $PureFieldName
     * @param string $TranslatedFieldName
     * @return ReactFieldCode
     */
    protected function _getFieldManageCodes($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName,$LoadedDataSubClass)
    {
        $obj=null;
        if(FieldType::fieldIsAutoGenerated($FieldName))
            $obj=new autoField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::fieldIsLongitude($FieldName))
            $obj=new emptyField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::fieldIsLatitude($FieldName))
            $obj=new locationField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::getFieldType($FieldName)==FieldType::$CLOCK)
            $obj=new clockField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif (FieldType::getFieldType($FieldName) == FieldType::$BOOLEAN)
            $obj=new booleanField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif (FieldType::getFieldType($FieldName) == FieldType::$FID) {
            if (FieldType::fieldIsCityAreaFid($FieldName))
                $obj=new cityAreaField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
            else $obj=new foreignIDField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        }
        elseif (FieldType::fieldIsImageUpload($FieldName))
            $obj=new imageUploadField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::fieldIsNumber($FieldName))
            $obj=new nummericField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        else
            $obj=new reactNativeManageField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        return $obj;
    }
    protected function makeReactNativeItemManageDesign($formInfo)
    {
        $this->makeReactNativeManagementController($formInfo);
        $this->makeReactNativeManagementStyle($formInfo);
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FormNames = $FormName . "s";
        $UFormNames = ucfirst($FormNames);
        $UFormName = ucfirst($FormName);
        $ModuleNames = $ModuleName . "s";
        $FileName = $ModuleName . "_$FormName" . "Manage";
        $StyleFileName = $FileName . "Styles";
        $ControllerFileName = $FileName . "Controller";
        $Translations = new Translator();
        $PageTitle = "اطلاعات " . $Translations->getPersian($FormName, $FormName);
        $AllFields = $this->getAllFormsOfFields();
        $Fields = $AllFields['fields'];
        $PersianFields = $AllFields['persianfields'];
        $PureFields = $AllFields['purefields'];
        $FieldCodes=[];
        $DataStateVariableCodes="";
        $CodeStateVariableCodes="";
        $ConstructorCodes="";
        $ImportCodes="";
        $ClassFieldDefinitionCodes="";
        $LoaderMethodCodes="";
        $LoaderMethodCallCodes="";
        $ViewCodes="";
        $SaveCodes="";
        $InitialDataLoadFieldFillCodes="";
        for ($i = 0; $i < count($Fields); $i++) {
            $FC=$this->_getFieldManageCodes($ModuleName,$FormName,$Fields[$i],$PureFields[$i],$PersianFields[$i],"");
            $DataStateVariableCodes.=$FC->getDataStateVariableCodes();
            $CodeStateVariableCodes.=$FC->getStateVariableCodes();
            $ConstructorCodes.=$FC->getConstructorCodes();
            $ImportCodes.=$FC->getImportCodes();
            $ClassFieldDefinitionCodes.=$FC->getClassFieldDefinitionCodes();
            $LoaderMethodCodes.=$FC->getLoaderMethodCodes();
            $LoaderMethodCallCodes.=$FC->getLoaderMethodCallCodes();
            $InitialDataLoadFieldFillCodes.=$FC->getInitialDataLoadFieldFillCodes();
            $ViewCodes.=$FC->getViewCodes();
            $SaveCodes.=$FC->getSaveCodes();
        }

        $C = "import React from 'react'

import $StyleFileName from '../../values/styles/$FormName/$StyleFileName';
import $ControllerFileName from '../../controllers/$FormName/$ControllerFileName';
import { CheckBox } from 'react-native-elements';
import {StyleSheet, View, TextInput, ScrollView, Dimensions,Picker,Text,Image,TouchableOpacity } from 'react-native';
import generalStyles from '../../../../styles/generalStyles';
import {SweetFetcher,ComponentHelper} from 'sweet-one-react-native-net';
import {Common} from 'sweet-js-common';
import Constants from '../../../../classes/Constants';
import {PickerBox,TextBox,TimeSelector,SweetImageSelector,SweetButton,CheckedRow,SweetPage,SweetLocationSelector} from 'sweet-react-native-components';
import CityAreaSelectorModal from '../../../../sweet/components/CityAreaSelectorModal';
import SweetAlert from 'sweet-react-native-alert';
$ImportCodes
export default class  $FileName extends SweetPage {
    $ClassFieldDefinitionCodes
    constructor(props) {
        super(props);
        this.state =
        {
            isLoading:false,
            formData:{},
            $CodeStateVariableCodes
        };";
        $C .= "
        $ConstructorCodes
        this.loadData();
    }
    loadData=()=>{
        $LoaderMethodCallCodes
        if(global.".$FormName."ID!=null)
        {
            this.setState({isLoading:true},()=>{
                new $ControllerFileName().load(global.".$FormName."ID,(data)=>{
                    this.setState({isLoading:false,formData:data});
                });
            });
        }
    };
$LoaderMethodCodes
    render() {
        let Window = Dimensions.get('window');
            return (
                <View style={{flex:1}}  >
                  <View style={{flex:1}}>
                    <ScrollView contentContainerStyle={{minHeight: this.height || Window.height}}>
                        <View style={generalStyles.container}><TouchableOpacity><View>
                        $ViewCodes";
        $C .= "
                            

                        </View></TouchableOpacity></View>
                    </ScrollView>
                        </View>
                    <View style={generalStyles.actionButtonContainer}>
                                <SweetButton title='ذخیره' style={generalStyles.actionButton} onPress={(OnEnd) => {
                                    let formIsValid=true;
                                    if(formIsValid)
                                    {
                                        const data =Common.appendObject2FormData(this.state.formData,new FormData());
                                        new $ControllerFileName().save(global.".$FormName."ID,data,(data)=>{
                                                 SweetAlert.displaySimpleAlert('پیام','اطلاعات با موفقیت ذخیره شد.');
                                                 OnEnd(true);
                                        },(error)=>{OnEnd(false)}); 
        $SaveCodes";
        $C .= "
                                    }
                                    else
                                        OnEnd(false);
                                }}/>
                            </View>
                </View>
            )
    }
}
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/pages/$FormName/" . $FileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
    protected function makeReactNativeManagementStyle($formInfo)
    {
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FileName = $ModuleName . "_$FormName" . "Manage";
        $StyleFileName = $FileName . "Styles";

        $C = "import {Dimensions, StyleSheet} from 'react-native';
let Window = Dimensions.get('window');
export default StyleSheet.create(
    {
        test:
            {
                width: '100%',

            },
    }
);
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/values/styles/$FormName/" . $StyleFileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
    protected function makeReactNativeManagementController($formInfo)
    {
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FormNames = $FormName . "s";
        $FileName = $ModuleName . "_$FormName" . "Manage";
        $ControllerFileName = $FileName . "Controller";
        $AllFields = $this->getAllFormsOfFields();
        $Fields = $AllFields['fields'];
        $Translations = new Translator();
        $PageTitle = " " . $Translations->getPersian($FormName, $FormName);
        $PersianFields = $AllFields['persianfields'];
        $PureFields = $AllFields['purefields'];
        $IdField=$FormName."ID";
        $C = "import controller from '../../../../sweet/architecture/controller';
import {SweetFetcher,AccessManager} from 'sweet-one-react-native-net';
import SweetHttpRequest from '../../../../classes/sweet-http-request';
import Constants from '../../../../classes/Constants';
import SweetConsole from '../../../../classes/SweetConsole';
import SweetAlert from 'sweet-react-native-alert';
import {Common} from 'sweet-js-common';


export default class $ControllerFileName extends controller {
    load($IdField,onLoad)
    {
        if($IdField>0){
            this.setState({isLoading:true});
            new SweetFetcher().Fetch('/$ModuleName/$FormName/'+$IdField,SweetFetcher.METHOD_GET, null, data => {
                onLoad(data.Data);
            });
        }//if
    }
    save($IdField,data,onSave,onError)
    {
        let method=SweetFetcher.METHOD_POST;
        let recordIdentifier='';
        let action=AccessManager.INSERT;
        if($IdField!=null || $IdField.length>=1){
            method=SweetFetcher.METHOD_PUT;
            recordIdentifier='/'+requestID;
            action=AccessManager.EDIT;
            data.append('id', $IdField);
        }//if
        new SweetFetcher().Fetch('/$ModuleName/$FormName'+recordIdentifier, method, data, data => {
            if(data.hasOwnProperty('Data'))
                onSave(data.Data);
            else
                onError(null);
        },error=>{onError(error);},'$ModuleName','$FormName',null);
    }
}
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/controllers/$FormName/" . $ControllerFileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
}


?>