<?php

namespace Modules\sfman\Controllers;


use Modules\sfman\Classes\Field\React\Native\Search\autoField;
use Modules\sfman\Classes\Field\React\Native\Search\booleanField;
use Modules\sfman\Classes\Field\React\Native\Search\cityAreaField;
use Modules\sfman\Classes\Field\React\Native\Search\clockField;
use Modules\sfman\Classes\Field\React\Native\Search\emptyField;
use Modules\sfman\Classes\Field\React\Native\Search\foreignIDField;
use Modules\sfman\Classes\Field\React\Native\Search\imageUploadField;
use Modules\sfman\Classes\Field\React\Native\Search\locationField;
use Modules\sfman\Classes\Field\React\Native\Search\nummericField;
use Modules\sfman\Classes\Field\React\Native\Search\reactNativeItemSearchField;
use Modules\sfman\Classes\Field\React\ReactFieldCode;
/**
 * @author Hadi AmirNahavandi
 * @creationDate 1395/10/9 - 2016/12/29 19:36:38
 * @lastUpdate 1395/10/9 - 2016/12/29 19:36:38
 * @SweetFrameworkHelperVersion 1.112
 */
abstract class manageDBReactNativeListFormController extends manageDBReactNativeViewFormController
{


    /**
     * @param string $ModuleName
     * @param string $FormName
     * @param string $FieldName
     * @param string $PureFieldName
     * @param string $TranslatedFieldName
     * @param string $LoadedDataSubClass
     * @return ReactFieldCode
     */
    protected function _getFieldSearchCodes($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName,$LoadedDataSubClass)
    {

        $obj=null;
        if(FieldType::fieldIsAutoGenerated($FieldName))
            $obj=new autoField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::fieldIsLongitude($FieldName))
            $obj=new locationField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::fieldIsLatitude($FieldName))
            $obj=new locationField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::getFieldType($FieldName)==FieldType::$CLOCK)
            $obj=new clockField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif (FieldType::getFieldType($FieldName) == FieldType::$BOOLEAN)
            $obj=new booleanField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif (FieldType::getFieldType($FieldName) == FieldType::$FID) {

            if (FieldType::fieldIsCityAreaFid($FieldName))
                $obj=new cityAreaField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
            elseif (FieldType::fieldIsPlaceFid($FieldName))
                $obj=new emptyField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
            else
                $obj=new foreignIDField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        }
        elseif (FieldType::fieldIsImageUpload($FieldName))
            $obj=new imageUploadField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        elseif(FieldType::fieldIsNumber($FieldName))
            $obj=new nummericField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        else
            $obj=new reactNativeItemSearchField($ModuleName,$FormName,$FieldName,$PureFieldName,$TranslatedFieldName,$LoadedDataSubClass);
        return $obj;
    }

    protected function makeReactNativeListDesign($formInfo)
    {
        $this->makeReactNativeSearchDesign($formInfo);
        $this->makeReactNativeListController($formInfo);
        $this->makeReactNativeListStyle($formInfo);
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FormNames = $FormName . "s";
        $FileName = $ModuleName . "_$FormName" . "List";
        $SearchFileName = ucfirst($ModuleName) . "_$FormName" . "Search";
        $StyleFileName = $FileName . "Styles";
        $ControllerFileName = $FileName . "Controller";
        $RouteFileName = $ModuleName . "_$FormName" . "Routes";
        $AllFields = $this->getAllFormsOfFields();
        $Fields = $AllFields['fields'];
        $Translations = new Translator();
        $PageTitle = " " . $Translations->getPersian($FormName, $FormName);
        $PersianFields = $AllFields['persianfields'];
        $PureFields = $AllFields['purefields'];
        $FieldDisplayCodes = "";
        for ($i = 0; $i < count($Fields); $i++) {
            if (FieldType::getFieldType($Fields[$i]) == FieldType::$FID) {
                $FieldDisplayCodes .= "
                <Text style={generalStyles.simplelabel}>{item.$PureFields[$i]" . "content}</Text>";
            } elseif (FieldType::fieldIsImageUpload($Fields[$i])) {

                $FieldDisplayCodes .= "
                <Image style={generalStyles.listitemthumbnail} source={{uri: Constants.ServerURL+'/'+item.$PureFields[$i]}}/>
";
            } else {
                $FieldDisplayCodes .= "
                <Text style={generalStyles.simplelabel}>{item.$PureFields[$i]}</Text>";
            }
        }
        $C = "import React from 'react'
import { Button } from 'react-native-elements';
import {StyleSheet, View, Dimensions,Image,TouchableWithoutFeedback,Text,Picker,TextInput,ScrollView,FlatList} from 'react-native';
import generalStyles from '../../../../styles/generalStyles';
import {SweetFetcher} from 'sweet-one-react-native-net';
import {SweetListPage,ListTopBar,PageContainer,TextRow,PickerBox,TextBox,TimeSelector,CheckedRow} from 'sweet-react-native-components';
import {Common,SweetHttpRequest} from 'sweet-js-common';
import Constants from '../../../../classes/Constants';
import SweetNavigation from '../../../../classes/sweetNavigation';
import CityAreaSelector from '../../../../sweet/components/CityAreaSelector';
import $SearchFileName from './$SearchFileName';
import $StyleFileName from '../../values/styles/$FormName/$StyleFileName';
import $ControllerFileName from '../../controllers/$FormName/$ControllerFileName';
import $RouteFileName from '../../routes/$RouteFileName';
import jMoment from 'moment-jalaali';
import moment from 'moment';


export default class $FileName extends SweetListPage {

    state =
    {
        ...super.state,
        $FormNames:[],
        SearchFields:this.props.navigation.getParam('SearchFields',null),
        sortField: $ControllerFileName.SORTFIELD_ID,
    };
    async componentDidMount() {
        this._loadData(true, false);
    }
    _loadData=(isRefreshing)=>{
        let {nextStartRow,$FormNames}=this.state;
        if(isRefreshing)
        {
            $FormNames=[];
            nextStartRow=0;
        }
        this.setState({isRefreshing:isRefreshing,isLoading:true},()=>{
            new $ControllerFileName().loadData(this.state.searchText, this.state.SearchFields, nextStartRow, this.state.sortField, (data) => {
                this.setState({
                    $FormNames: [...".$FormNames.", ...data],
                    nextStartRow: nextStartRow + Constants.DEFAULT_PAGESIZE,
                    isLoading: false,
                    isRefreshing: false,
                });
                
            });
            
        });
    };
    render() {
            const renderListItem=({item}) =>{
                        return <TouchableWithoutFeedback onPress={() => {
                                global.".$FormName."ID=item.id;
                                SweetNavigation.navigateToNormalPage(this.props.navigation,$RouteFileName.".strtoupper($FormName)  . "_MANAGE" . ");
                            }}>
                            <View style={generalStyles.ListItem}>
                            $FieldDisplayCodes
                            </View>
                            </TouchableWithoutFeedback>
                        };//renderListItem
            const content=<View style={{flex: 1}}>
                    <View style={generalStyles.listcontainer}>
                {
                this._getTopBar([{id:$ControllerFileName.SORTFIELD_ID,name: 'جدیدترین ها'}],
                () => {SweetNavigation.navigateToNormalPage(this.props.navigation,'trapp_villaSearch');})
                }
                <PageContainer isLoading={this.state.isLoading}
                               isEmpty={this.state.$FormNames == null || this.state.$FormNames.length == 0}>
                               <View style={generalStyles.listcontainer}>
                    {this._getFlatList(this.state.$ControllerFileName,renderListItem)}
                </View>
                </PageContainer>

                    </View>
                
                </View>";
        $C .= "
    }
}
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/pages/$FormName/" . $FileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
    protected function makeReactNativeListStyle($formInfo)
    {
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FileName = $ModuleName . "_$FormName" . "List";
        $StyleFileName = $FileName . "Styles";

        $C = "import {Dimensions, StyleSheet} from 'react-native';
let Window = Dimensions.get('window');
export default StyleSheet.create(
    {
        test:
            {
                width: '100%',

            },
    }
);
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/values/styles/$FormName/" . $StyleFileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
    protected function makeReactNativeListController($formInfo)
    {
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FormNames = $FormName . "s";
        $FileName = $ModuleName . "_$FormName" . "List";
        $ControllerFileName = $FileName . "Controller";
        $AllFields = $this->getAllFormsOfFields();
        $Fields = $AllFields['fields'];
        $Translations = new Translator();
        $PageTitle = " " . $Translations->getPersian($FormName, $FormName);
        $PersianFields = $AllFields['persianfields'];
        $PureFields = $AllFields['purefields'];

        $C = "import controller from '../../../../sweet/architecture/controller';
import {SweetFetcher} from 'sweet-one-react-native-net';
import {SweetHttpRequest,Common} from 'sweet-js-common';
import Constants from '../../../../classes/Constants';
import SweetAlert from 'sweet-react-native-alert';


export default class $ControllerFileName extends controller {
    static SORTFIELD_ID = 'id';
    loadData = (SearchText, SearchFields,nextStartRow,sortField,onLoad) => {
            let Request=new SweetHttpRequest();
            Request.appendVariablesFromObjectKeys(SearchFields,true);
            Request.appendVariable('__pagesize', Constants.DEFAULT_PAGESIZE);
            if (sortField === $ControllerFileName.SORTFIELD_ID)
                Request.appendVariable('id__sort', '1');
            Request.appendVariable('__startrow', nextStartRow);
            Request.appendVariable('searchtext', SearchText,true);
            let filterString = Request.getParamsString();
            if(filterString!='') filterString='?'+filterString;
            let url='/$ModuleName/$FormName'+filterString;
            new SweetFetcher().Fetch(url,SweetFetcher.METHOD_GET, null, data => {
                onLoad(data.Data);
            });
    };
}
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/controllers/$FormName/" . $ControllerFileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
    protected function makeReactNativeSearchDesign($formInfo)
    {
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FormNames = $FormName . "s";
        $FileName = ucfirst($ModuleName) . "_$FormName" . "Search";
        $ListFileName = $ModuleName . "_$FormName" . "List";
        $AllFields = $this->getAllFormsOfFields();
        $Fields = $AllFields['fields'];
        $PersianFields = $AllFields['persianfields'];
        $PureFields = $AllFields['purefields'];

        $Translations = new Translator();
        $PageTitle = " " . $Translations->getPersian($FormName, $FormName);
        $DataStateVariableCodes="";
        $CodeStateVariableCodes="";
        $ConstructorCodes="";
        $ImportCodes="";
        $ClassFieldDefinitionCodes="";
        $LoaderMethodCodes="";
        $LoaderMethodCallCodes="";
        $SearchCodes="";
        $SaveCodes="";
        for ($i = 0; $i < count($Fields); $i++) {
            $FC=$this->_getFieldSearchCodes($ModuleName,$FormName,$Fields[$i],$PureFields[$i],$PersianFields[$i],"");
            $DataStateVariableCodes.=$FC->getDataStateVariableCodes();
            $CodeStateVariableCodes.=$FC->getStateVariableCodes();
            $ConstructorCodes.=$FC->getConstructorCodes();
            $ImportCodes.=$FC->getImportCodes();
            $ClassFieldDefinitionCodes.=$FC->getClassFieldDefinitionCodes();
            $LoaderMethodCodes.=$FC->getLoaderMethodCodes();
            $LoaderMethodCallCodes.=$FC->getLoaderMethodCallCodes();
            $SearchCodes.=$FC->getViewCodes();
            $SaveCodes.=$FC->getSaveCodes();
        }
        $C = "import React, {Component} from 'react'
import {StyleSheet, View, Alert, Dimensions,AsyncStorage,Image,TouchableWithoutFeedback,Text,Picker,TextInput,ScrollView,FlatList } from 'react-native';
import generalStyles from '../../../../styles/generalStyles';

import {PickerBox,TextBox,TimeSelector,SweetButton,CheckedRow,SweetPage} from 'sweet-react-native-components';
import {SweetFetcher} from 'sweet-one-react-native-net';
import {SweetHttpRequest,Common} from 'sweet-js-common';
import Constants from '../../../../classes/Constants';
import CityAreaSelector from '../../../../sweet/components/CityAreaSelector';

export default class $FileName extends SweetPage {
    state =
    {
        SearchFields:{
            $DataStateVariableCodes
        },
        $CodeStateVariableCodes
    };
    async componentDidMount() {
        $LoaderMethodCallCodes
    }
    $LoaderMethodCodes
    render() {
        const {height: heightOfDeviceScreen} =  Dimensions.get('window');
            return (<View style={{flex: 1}}>
                        <ScrollView contentContainerStyle={{minHeight: this.height || heightOfDeviceScreen}}>
                            <View>
                                $SearchCodes
                                <SweetButton title={'جستجو'} onPress={(OnEnd) => {
                                      SweetNavigation.navigateToNormalPage(this.props.navigation,'$ListFileName',{SearchFields:this.state.SearchFields});
                                        OnEnd(false);
                            }}/>
                            </View>
                        </ScrollView>
                </View>
            );";
        $C .= "
    }
}
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/pages/$FormName/" . $FileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }

}

?>