<?php

namespace Modules\sfman\Controllers;


use Modules\sfman\Classes\Field\React\Native\View\autoField;
use Modules\sfman\Classes\Field\React\Native\View\booleanField;
use Modules\sfman\Classes\Field\React\Native\View\cityAreaField;
use Modules\sfman\Classes\Field\React\Native\View\clockField;
use Modules\sfman\Classes\Field\React\Native\View\emptyField;
use Modules\sfman\Classes\Field\React\Native\View\foreignIDField;
use Modules\sfman\Classes\Field\React\Native\View\imageUploadField;
use Modules\sfman\Classes\Field\React\Native\View\locationField;
use Modules\sfman\Classes\Field\React\Native\View\reactNativeViewField;
use Modules\sfman\Classes\Field\React\ReactFieldCode;
/**
 * @author Hadi AmirNahavandi
 * @creationDate 1395/10/9 - 2016/12/29 19:36:38
 * @lastUpdate 1395/10/9 - 2016/12/29 19:36:38
 * @SweetFrameworkHelperVersion 1.112
 */
abstract class manageDBReactNativeViewFormController extends manageDBReactNativeManageFormController
{
    private function _getPlaceFidViewCode($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass)
    {
        $FFC = new foreignIDField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        /*********************************************************/
        $Fields = $this->getTableFields("placeman_place");
        $AllFields = $this->getAllFormsOfFields($Fields);
        $Fields = $AllFields['fields'];
        $PersianFields = $AllFields['persianfields'];
        $PureFields = $AllFields['purefields'];
        $ViewCodes = "";
        $EndViewCodes = "";
        $StateVars="";
        for ($i = 0; $i < count($Fields); $i++) {
            $FC = $this->_getFieldViewCodes($ModuleName, $FormName, $Fields[$i], $PureFields[$i], $PersianFields[$i], $PureFieldName."info.");
            if ($FC->getAddPolicy() == ReactFieldCode::$ADD_POLICY_TO_TOP)
                $ViewCodes = $FC->getViewCodes() . $ViewCodes;
            elseif ($FC->getAddPolicy() == ReactFieldCode::$ADD_POLICY_TO_BOTTOM)
                $EndViewCodes .= $FC->getViewCodes();
            else
                $ViewCodes .= $FC->getViewCodes();
            $StateVars.=$FC->getDataStateVariableCodes();
        }
        $ViewCodes .= $EndViewCodes;
        /*********************************************************/
        $StateVariableCodes = "
                    $PureFieldName" . "info:{".$StateVars."},";
        $FFC->setDataStateVariableCodes($StateVariableCodes);
        $FFC->setViewCodes($ViewCodes);
        $FFC->setAddPolicy(ReactFieldCode::$ADD_POLICY_TO_BOTTOM);
        return $FFC;
    }


    /**
     * @param string $ModuleName
     * @param string $FormName
     * @param string $FieldName
     * @param string $PureFieldName
     * @param string $TranslatedFieldName
     * @param string $LoadedDataSubClass
     * @return ReactFieldCode
     */
    private function _getFieldViewCodes($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass)
    {

        $obj=null;
        if (FieldType::fieldIsAutoGenerated($FieldName))
            $obj= new autoField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        elseif (FieldType::fieldIsLongitude($FieldName))
            $obj= new emptyField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        elseif (FieldType::fieldIsLatitude($FieldName))
            $obj= new locationField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        elseif (FieldType::getFieldType($FieldName) == FieldType::$CLOCK)
            $obj= new clockField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        elseif (FieldType::getFieldType($FieldName) == FieldType::$BOOLEAN)
            $obj= new booleanField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        elseif (FieldType::getFieldType($FieldName) == FieldType::$FID) {

            if (FieldType::fieldIsCityAreaFid($FieldName))
                $obj= new cityAreaField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
            elseif (FieldType::fieldIsPlaceFid($FieldName))
                $obj= $this->_getPlaceFidViewCode($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
            else
                $obj= new foreignIDField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        }
        elseif (FieldType::fieldIsImageUpload($FieldName))
            $obj= new imageUploadField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        else
            $obj= new reactNativeViewField($ModuleName, $FormName, $FieldName, $PureFieldName, $TranslatedFieldName, $LoadedDataSubClass);
        return $obj;
    }
    protected function makeReactNativeItemViewDesign($formInfo)
    {
        $this->makeReactNativeViewStyle($formInfo);
        $this->makeReactNativeViewController($formInfo);
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FormNames = $FormName . "s";
        $UFormNames = ucfirst($FormNames);
        $UFormName = ucfirst($FormName);
        $ModuleNames = $ModuleName . "s";
        $FileName = $ModuleName . "_$FormName" . "View";
        $ControllerFileName = $FileName . "Controller";
        $StyleFileName = $FileName . "Styles";
        $Translations = new Translator();
        $PageTitle = "اطلاعات " . $Translations->getPersian($FormName, $FormName);
        $AllFields = $this->getAllFormsOfFields();
        $Fields = $AllFields['fields'];
        $PersianFields = $AllFields['persianfields'];
        $PureFields = $AllFields['purefields'];
        $FieldCodes = [];
        $StateVariableCodes = "";
        $ConstructorCodes = "";
        $ImportCodes = "";
        $ClassFieldDefinitionCodes = "";
        $LoaderMethodCodes = "";
        $LoaderMethodCallCodes = "";
        $ViewCodes = "";
        $EndViewCodes = "";
        $SearchCodes="";
        for ($i = 0; $i < count($Fields); $i++) {
            $FC = $this->_getFieldViewCodes($ModuleName, $FormName, $Fields[$i], $PureFields[$i], $PersianFields[$i], "");
            $StateVariableCodes .= $FC->getDataStateVariableCodes();
            $ConstructorCodes .= $FC->getConstructorCodes();
            $ImportCodes .= $FC->getImportCodes();
            $ClassFieldDefinitionCodes .= $FC->getClassFieldDefinitionCodes();
            $LoaderMethodCodes .= $FC->getLoaderMethodCodes();
            $LoaderMethodCallCodes .= $FC->getLoaderMethodCallCodes();
            if ($FC->getAddPolicy() == ReactFieldCode::$ADD_POLICY_TO_TOP)
                $ViewCodes = $FC->getViewCodes() . $ViewCodes;
            elseif ($FC->getAddPolicy() == ReactFieldCode::$ADD_POLICY_TO_BOTTOM)
                $EndViewCodes .= $FC->getViewCodes();
            else
                $ViewCodes .= $FC->getViewCodes();
        }
        $ViewCodes .= $EndViewCodes;

        $C = "import React, {Component} from 'react';
import {StyleSheet,View,ScrollView,Dimensions,Text,Image} from 'react-native';
import {SweetPage,TextRow,SweetButton,PageContainer,SweetTopCarousel,ViewBox} from 'sweet-react-native-components';
import generalStyles from '../../../../styles/generalStyles';
import Constants from '../../../../classes/Constants';
import {Common} from 'sweet-js-common';
import SimpleMap from '../../../../components/SimpleMap';
import SweetAlert from 'sweet-react-native-alert';
import $ControllerFileName from '../../controllers/$FormName/$ControllerFileName';
import $StyleFileName from '../../values/styles/$FormName/$StyleFileName';
$ImportCodes
export default class $FileName extends SweetPage {
    $ClassFieldDefinitionCodes
    constructor(props) {
        super(props);
        $ConstructorCodes
    }
    componentDidMount(){
        super.componentDidMount();
        this.loadData();
    }
    
    loadData = () => {
        this.setState({isLoading: true},()=>{
            new $ControllerFileName().load(global.$FormName"."ID,(data)=>{
                this.setState({LoadedData: {...data}, isLoading: false});
            });
        });
    };
$LoaderMethodCallCodes
$LoaderMethodCodes
    render() {
        let Window = Dimensions.get('window');
        let content=<View style={{flex: 1}}>
                {this.state.LoadedData != null &&
                    <View>
                        <ScrollView contentContainerStyle={{minHeight: this.height || Window.height}}>
                            <View style={generalStyles.containerWithNoBG}>
                            <ViewBox title={'اطلاعات'}>
                                $ViewCodes
                            </ViewBox>
                            </View>
                        </ScrollView>
                     </View>
                }
                </View>
        return (<PageContainer isLoading={this.state.isLoading}>{content}</PageContainer>);
    }
}
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/pages/$FormName/" . $FileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
    private function makeReactNativeViewStyle($formInfo)
    {
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FileName = $ModuleName . "_$FormName" . "View";
        $StyleFileName = $FileName . "Styles";

        $C = "import {Dimensions, StyleSheet} from 'react-native';
let Window = Dimensions.get('window');
export default StyleSheet.create(
    {
        test:
            {
                width: '100%',

            },
    }
);
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/values/styles/$FormName/" . $StyleFileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }
    private function makeReactNativeViewController($formInfo)
    {
        $ModuleName = $formInfo['module']['name'];
        $FormName = $formInfo['form']['name'];
        $FileName = $ModuleName . "_$FormName" . "View";
        $ControllerFileName = $FileName . "Controller";
        $C = "import controller from '../../../../sweet/architecture/controller';
import {SweetFetcher} from 'sweet-one-react-native-net';
import {SweetHttpRequest,Common} from 'sweet-js-common';
import Constants from '../../../../classes/Constants';
import SweetAlert from 'sweet-react-native-alert';


export default class $ControllerFileName extends controller {
    load($FormName"."Id,onLoad)
    {
        new SweetFetcher().Fetch('/trapp/$FormName/' + $FormName"."Id, SweetFetcher.METHOD_GET, null, data => {
            onLoad(data.Data);
        });
    }
}
    ";
        $DesignFile = $this->getReactNativeCodeModuleDir() . "/modules/" . $ModuleName . "/controllers/$FormName/" . $ControllerFileName . ".js";
        $this->SaveFile($DesignFile, $C);
    }

}

?>